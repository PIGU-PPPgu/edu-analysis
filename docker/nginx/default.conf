# 🌐 Nginx默认服务器配置 - SPA应用优化
# 支持History API路由、静态资源缓存、安全头

# 上游服务器定义（如果需要代理API）
upstream api_backend {
    least_conn;
    server api:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# 速率限制定义
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

# 主服务器配置
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # 根目录
    root /usr/share/nginx/html;
    index index.html;

    # 启用压缩
    include /etc/nginx/conf.d/gzip.conf;
    
    # 安全配置
    include /etc/nginx/conf.d/security.conf;

    # 自定义错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    # 健康检查端点
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }

    # 静态资源缓存配置
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 预检查文件是否存在
        try_files $uri =404;
        
        # 启用条件请求
        if_modified_since exact;
        etag on;
    }

    # 特殊静态资源处理
    location ~* \.(manifest\.json|browserconfig\.xml|favicon\.ico)$ {
        expires 7d;
        add_header Cache-Control "public";
        log_not_found off;
    }

    # 源地图文件（仅在开发环境）
    location ~* \.map$ {
        expires 1d;
        add_header Cache-Control "private, no-cache";
        access_log off;
    }

    # API代理配置
    location /api/ {
        # 速率限制
        limit_req zone=api burst=20 nodelay;
        
        # 代理到后端API
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 缓存控制
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_upgrade;
        
        # 超时设置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 重试配置
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
    }

    # 登录端点特殊限制
    location /api/auth/login {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://api_backend;
        
        # 复制上面的proxy设置
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WebSocket支持
    location /ws/ {
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket特定设置
        proxy_cache off;
        proxy_buffering off;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }

    # SPA应用路由支持
    location / {
        try_files $uri $uri/ @fallback;
        
        # 添加安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 禁用缓存（用于HTML文件）
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # SPA路由回退
    location @fallback {
        rewrite ^.*$ /index.html last;
    }

    # 开发工具和调试端点（生产环境应禁用）
    location ~ ^/(\.well-known|debug|dev-tools)/ {
        return 404;
    }

    # 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 禁止访问配置文件
    location ~ \.(conf|ini|log|sh|sql|bak|swp|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 机器人文件
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /sitemap.xml {
        allow all;
        log_not_found off;
        access_log off;
    }
}

# HTTPS重定向服务器（如果使用SSL终止）
server {
    listen 80;
    server_name figma-frame-faithful.com www.figma-frame-faithful.com;
    
    # 重定向到HTTPS
    return 301 https://$host$request_uri;
}

# SSL配置示例（如果在容器内处理SSL）
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name figma-frame-faithful.com www.figma-frame-faithful.com;
#     
#     # SSL配置
#     ssl_certificate /etc/ssl/certs/cert.pem;
#     ssl_certificate_key /etc/ssl/private/key.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     
#     # 现代SSL配置
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # 包含主配置
#     include /etc/nginx/conf.d/default.conf;
# }