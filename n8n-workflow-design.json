{
  "name": "学生成绩智能解析工作流",
  "version": "1.0.0",
  "description": "处理学生成绩文件上传、AI智能解析、数据验证和存储的完整工作流",
  "nodes": [
    {
      "name": "HTTP请求接收器",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [240, 300],
      "parameters": {
        "httpMethod": "POST",
        "path": "/parse-grade-file",
        "responseMode": "responseNode",
        "options": {
          "bodyContentType": "multipart-form-data"
        }
      }
    },
    {
      "name": "文件解析器",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [460, 300],
      "parameters": {
        "language": "javascript",
        "jsCode": "// 智能文件解析逻辑\nconst items = $input.all();\n\nfor (const item of items) {\n  const file = item.binary?.file;\n  if (!file) {\n    throw new Error('未找到上传文件');\n  }\n  \n  const fileName = file.fileName || 'unknown';\n  const fileExtension = fileName.split('.').pop()?.toLowerCase();\n  \n  let parsedData = [];\n  \n  if (fileExtension === 'csv') {\n    // CSV解析\n    const csvData = Buffer.from(file.data, 'base64').toString('utf-8');\n    const lines = csvData.split('\\n').filter(line => line.trim());\n    const headers = lines[0].split(',').map(h => h.trim());\n    \n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(',').map(v => v.trim());\n      const rowData = {};\n      headers.forEach((header, index) => {\n        rowData[header] = values[index] || '';\n      });\n      parsedData.push(rowData);\n    }\n  } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {\n    // Excel解析 (需要额外库支持)\n    throw new Error('Excel格式暂不支持，请转换为CSV格式');\n  }\n  \n  return {\n    json: {\n      fileName: fileName,\n      rowCount: parsedData.length,\n      headers: Object.keys(parsedData[0] || {}),\n      data: parsedData,\n      parseStatus: 'success'\n    }\n  };\n}"
      }
    },
    {
      "name": "AI字段映射分析",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [680, 300],
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "gpt-3.5-turbo"
            },
            {
              "name": "messages",
              "value": "={{ [{\"role\": \"system\", \"content\": \"你是一个教育数据分析专家，专门处理学生成绩数据的字段映射。请分析上传的数据表头，识别以下字段：\\n\\n学生信息字段：\\n- 学号/学生编号 (student_id)\\n- 姓名 (name)\\n- 班级/行政班级 (class_name)\\n- 年级 (grade)\\n\\n成绩字段：\\n- 各科目成绩 (语文/数学/英语/物理/化学/生物/政治/历史/地理等)\\n- 总分 (total_score)\\n- 排名信息 (班级排名/年级排名)\\n\\n请返回JSON格式的字段映射结果，格式如下：\\n{\\n  \\\"fieldMapping\\\": {\\n    \\\"原始字段名\\\": \\\"标准字段名\\\"\\n  },\\n  \\\"subjects\\\": [\\\"识别到的科目列表\\\"],\\n  \\\"studentFields\\\": [\\\"学生信息字段\\\"],\\n  \\\"confidence\\\": 0.95\\n}\"}, {\"role\": \"user\", \"content\": \"请分析以下数据表头：\" + JSON.stringify($node[\\\"文件解析器\\\"].json.headers)}] }}"
            },
            {
              "name": "temperature",
              "value": 0.3
            }
          ]
        }
      }
    },
    {
      "name": "数据标准化处理",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [900, 300],
      "parameters": {
        "language": "javascript",
        "jsCode": "// 数据标准化和清洗逻辑\nconst fileData = $node[\"文件解析器\"].json;\nconst aiMapping = JSON.parse($node[\"AI字段映射分析\"].json.choices[0].message.content);\n\nconst standardizedData = [];\nconst errors = [];\nconst duplicates = new Set();\n\n// 处理每行数据\nfor (const row of fileData.data) {\n  try {\n    const standardRow = {\n      student_id: '',\n      name: '',\n      class_name: '',\n      grade: '',\n      scores: {},\n      metadata: {}\n    };\n    \n    // 应用字段映射\n    for (const [originalField, standardField] of Object.entries(aiMapping.fieldMapping)) {\n      const value = row[originalField] || '';\n      \n      if (standardField === 'student_id') {\n        standardRow.student_id = value.toString().trim();\n      } else if (standardField === 'name') {\n        standardRow.name = value.toString().trim();\n      } else if (standardField === 'class_name') {\n        // 班级名称标准化\n        let className = value.toString().trim();\n        className = className.replace(/[（）()]/g, '').replace(/班$/, '班');\n        standardRow.class_name = className;\n      } else if (standardField === 'grade') {\n        standardRow.grade = value.toString().trim();\n      } else if (aiMapping.subjects.includes(standardField)) {\n        // 成绩数据处理\n        const score = parseFloat(value);\n        if (!isNaN(score)) {\n          standardRow.scores[standardField] = score;\n        }\n      } else {\n        // 其他数据存入metadata\n        standardRow.metadata[standardField] = value;\n      }\n    }\n    \n    // 数据验证\n    if (!standardRow.student_id) {\n      errors.push(`第${standardizedData.length + 1}行：缺少学号`);\n      continue;\n    }\n    \n    if (!standardRow.name) {\n      errors.push(`第${standardizedData.length + 1}行：缺少姓名`);\n      continue;\n    }\n    \n    // 重复检查\n    const uniqueKey = `${standardRow.student_id}_${standardRow.name}`;\n    if (duplicates.has(uniqueKey)) {\n      errors.push(`重复数据：${standardRow.name}(${standardRow.student_id})`);\n      continue;\n    }\n    duplicates.add(uniqueKey);\n    \n    standardizedData.push(standardRow);\n    \n  } catch (error) {\n    errors.push(`第${standardizedData.length + 1}行处理错误：${error.message}`);\n  }\n}\n\nreturn {\n  json: {\n    processedData: standardizedData,\n    errors: errors,\n    summary: {\n      totalRows: fileData.data.length,\n      processedRows: standardizedData.length,\n      errorRows: errors.length,\n      subjects: aiMapping.subjects,\n      confidence: aiMapping.confidence\n    }\n  }\n};"
      }
    },
    {
      "name": "数据库存储",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1120, 300],
      "parameters": {
        "operation": "executeQuery",
        "query": "-- 动态插入学生和成绩数据的SQL\n-- 这里需要根据实际的Supabase连接配置\nINSERT INTO students (student_id, name, class_name, grade) \nVALUES ($1, $2, $3, $4) \nON CONFLICT (student_id) DO UPDATE SET \n  name = EXCLUDED.name,\n  class_name = EXCLUDED.class_name,\n  grade = EXCLUDED.grade;\n\n-- 成绩数据插入逻辑需要循环处理\n-- 具体实现需要在代码节点中处理"
      }
    },
    {
      "name": "结果返回",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300],
      "parameters": {
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"文件解析完成\",\n  \"summary\": $node[\"数据标准化处理\"].json.summary,\n  \"errors\": $node[\"数据标准化处理\"].json.errors\n} }}",
        "responseHeaders": {
          "Content-Type": "application/json"
        }
      }
    }
  ],
  "connections": {
    "HTTP请求接收器": {
      "main": [["文件解析器"]]
    },
    "文件解析器": {
      "main": [["AI字段映射分析"]]
    },
    "AI字段映射分析": {
      "main": [["数据标准化处理"]]
    },
    "数据标准化处理": {
      "main": [["数据库存储"]]
    },
    "数据库存储": {
      "main": [["结果返回"]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
} 