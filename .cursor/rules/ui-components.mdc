---
description:
globs:
alwaysApply: false
---
# UI组件和样式约定

本应用使用Shadcn UI（基于Radix UI）和Tailwind CSS进行界面设计。下面是UI组件和样式相关的指导。

## 组件库架构

- **UI组件基础**：[src/components/ui/](mdc:src/components/ui/) 包含Shadcn UI组件
- **业务组件**：[src/components/](mdc:src/components/) 包含基于基础UI组件构建的业务组件

## 主要UI组件

项目使用Shadcn UI提供的以下主要组件：

- **Button**：按钮组件，支持不同的变体和尺寸
- **Input**：输入框组件
- **Dialog**：对话框组件
- **Table**：表格组件
- **Tabs**：标签页组件
- **Form**：表单组件，与React Hook Form集成
- **Card**：卡片组件
- **Toast**：提示通知组件

## 样式约定

项目使用Tailwind CSS进行样式管理，主要约定如下：

### 主题配置

主题配置在[tailwind.config.ts](mdc:tailwind.config.ts)文件中定义。包括颜色、间距、边框半径等设计标记。

### 常用布局模式

```tsx
// 页面容器布局
<div className="container mx-auto py-6 space-y-6">
  {/* 内容 */}
</div>

// 卡片布局
<Card>
  <CardHeader>
    <CardTitle>标题</CardTitle>
    <CardDescription>描述</CardDescription>
  </CardHeader>
  <CardContent>
    {/* 内容 */}
  </CardContent>
  <CardFooter>
    {/* 页脚 */}
  </CardFooter>
</Card>

// 表单布局
<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
    <FormField
      control={form.control}
      name="name"
      render={({ field }) => (
        <FormItem>
          <FormLabel>姓名</FormLabel>
          <FormControl>
            <Input placeholder="请输入姓名" {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
    <Button type="submit">提交</Button>
  </form>
</Form>
```

### 响应式设计

项目使用Tailwind CSS的响应式前缀进行响应式设计：

```tsx
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* 内容 */}
</div>
```

## 数据展示组件

### 表格组件

```tsx
<Table>
  <TableHeader>
    <TableRow>
      <TableHead>学号</TableHead>
      <TableHead>姓名</TableHead>
      <TableHead>班级</TableHead>
      <TableHead>操作</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    {students.map((student) => (
      <TableRow key={student.student_id}>
        <TableCell>{student.student_id}</TableCell>
        <TableCell>{student.name}</TableCell>
        <TableCell>{student.class_name}</TableCell>
        <TableCell>
          <Button variant="outline" size="sm">查看</Button>
        </TableCell>
      </TableRow>
    ))}
  </TableBody>
</Table>
```

### 图表组件

项目使用Recharts库创建图表：

```tsx
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer 
} from 'recharts';

// 成绩分布图表
<ResponsiveContainer width="100%" height={400}>
  <BarChart data={scoreData}>
    <CartesianGrid strokeDasharray="3 3" />
    <XAxis dataKey="name" />
    <YAxis />
    <Tooltip />
    <Legend />
    <Bar dataKey="value" fill="#8884d8" />
  </BarChart>
</ResponsiveContainer>
```

## 表单处理

项目使用React Hook Form和Zod进行表单处理：

```tsx
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";

// 定义表单模式
const formSchema = z.object({
  name: z.string().min(2, "姓名至少需要2个字符"),
  class_name: z.string().min(1, "请选择班级"),
  // 其他字段...
});

// 使用表单
function StudentForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      class_name: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    // 处理表单提交...
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {/* 表单字段 */}
      </form>
    </Form>
  );
}
```

## 开发者须知

1. 优先使用Shadcn UI提供的组件，保持界面一致性
2. 使用Tailwind CSS进行样式定制，避免编写原生CSS
3. 遵循约定的响应式设计模式
4. 使用React Hook Form和Zod处理表单验证
5. 使用Toast组件显示操作反馈通知
