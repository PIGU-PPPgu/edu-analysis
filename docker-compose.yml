version: '3.8'

services:
  # 前端开发服务 - Vite + 热重载
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - backend-api
      - python-service
    networks:
      - figma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API代理服务 - Express.js
  backend-api:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - figma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python数据处理服务 - Flask
  python-service:
    build:
      context: ./python-data-processor
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./python-data-processor:/app
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONPATH=/app
      - SUPABASE_URL=${SUPABASE_URL:-https://giluhqotfjpmofowvogn.supabase.co}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdpbHVocW90ZmpwbW9mb3d2b2duIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzMDIwMDQsImV4cCI6MjA2MDg3ODAwNH0.NkVIqDlRM-qh8Ho}
    networks:
      - figma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控和健康检查服务
  monitoring:
    image: alpine:latest
    command: |
      sh -c "
        apk add --no-cache curl &&
        while true; do
          echo '=== 服务健康检查 $(date) ===' &&
          echo '前端服务:' && curl -s http://frontend-dev:8080 >/dev/null && echo '✅ 正常' || echo '❌ 异常' &&
          echo '后端API:' && curl -s http://backend-api:3001/health >/dev/null && echo '✅ 正常' || echo '❌ 异常' &&
          echo 'Python服务:' && curl -s http://python-service:5000/health >/dev/null && echo '✅ 正常' || echo '❌ 异常' &&
          echo '================================' &&
          sleep 60
        done
      "
    depends_on:
      - frontend-dev
      - backend-api
      - python-service
    networks:
      - figma-network
    restart: unless-stopped

networks:
  figma-network:
    driver: bridge

volumes:
  node_modules:
  python_cache: