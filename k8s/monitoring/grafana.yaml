# 📈 Grafana可视化监控仪表板
# 为监控数据提供美观的可视化界面

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    protocol = http
    http_port = 3000
    domain = localhost
    enforce_domain = false
    root_url = %(protocol)s://%(domain)s:%(http_port)s/
    serve_from_sub_path = false
    
    [database]
    type = sqlite3
    host = 127.0.0.1:3306
    name = grafana
    user = root
    password =
    url =
    ssl_mode = disable
    path = /var/lib/grafana/data/grafana.db
    max_idle_conn = 2
    max_open_conn =
    conn_max_lifetime = 14400
    log_queries =
    
    [session]
    provider = file
    provider_config = sessions
    cookie_name = grafana_sess
    cookie_secure = false
    session_life_time = 86400
    gc_interval_time = 86400
    
    [dataproxy]
    logging = false
    timeout = 30
    send_user_header = false
    
    [security]
    admin_user = admin
    admin_password = admin123!@#
    secret_key = SW2YcwTIb9zpOOhoPsMm
    login_remember_days = 7
    cookie_username = grafana_user
    cookie_remember_name = grafana_remember
    disable_gravatar = false
    data_source_proxy_whitelist =
    disable_brute_force_login_protection = false
    
    [snapshots]
    external_enabled = true
    external_snapshot_url = https://snapshots-origin.raintank.io
    external_snapshot_name = Publish to snapshot.raintank.io
    snapshot_remove_expired = true
    
    [dashboards]
    versions_to_keep = 20
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_id = 1
    auto_assign_org_role = Viewer
    verify_email_enabled = false
    login_hint = email or username
    default_theme = dark
    
    [auth]
    login_cookie_name = grafana_session
    login_maximum_inactive_lifetime_days = 7
    login_maximum_lifetime_days = 30
    token_rotation_interval_minutes = 10
    disable_login_form = false
    disable_signout_menu = false
    signout_redirect_url =
    oauth_auto_login = false
    
    [auth.anonymous]
    enabled = false
    org_name = Main Org.
    org_role = Viewer
    
    [auth.basic]
    enabled = true
    
    [smtp]
    enabled = false
    
    [emails]
    welcome_email_on_sign_up = false
    
    [alerting]
    enabled = true
    execute_alerts = true
    error_or_timeout = alerting
    nodata_or_nullvalues = no_data
    concurrent_render_limit = 5
    
    [metrics]
    enabled = true
    interval_seconds = 10
    
    [metrics.graphite]
    address =
    prefix = prod.grafana.%(instance_name)s.
    
    [tracing.jaeger]
    address = localhost:6832
    always_included_tag = tag1:value1,tag2:value2
    sampler_type = const
    sampler_param = 1
    
    [external_image_storage]
    provider =
    
    [external_image_storage.s3]
    bucket =
    region =
    path =
    access_key =
    secret_key =
    
    [rendering]
    server_url =
    callback_url =
    concurrent_render_request_limit = 30

---
# 📊 ConfigMap - Grafana数据源配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
  labels:
    app: grafana
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        basicAuth: false
        jsonData:
          httpMethod: POST
          prometheusType: Prometheus
          prometheusVersion: 2.45.0
          cacheLevel: 'High'
          timeInterval: 30s
          queryTimeout: 60s
          defaultRegion: us-east-1
        secureJsonData: {}

---
# 📋 ConfigMap - Grafana仪表板配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
  labels:
    app: grafana
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: 'Figma Frame Faithful'
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# 📊 ConfigMap - Kubernetes监控仪表板
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-kubernetes
  namespace: monitoring
  labels:
    app: grafana
    dashboard: kubernetes
data:
  kubernetes-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Kubernetes 集群监控",
        "tags": ["kubernetes", "monitoring"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "集群节点状态",
            "type": "stat",
            "targets": [
              {
                "expr": "kube_node_status_condition{condition=\"Ready\",status=\"true\"}",
                "legendFormat": "就绪节点"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 1
                    }
                  ]
                }
              }
            },
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Pod状态分布",
            "type": "piechart",
            "targets": [
              {
                "expr": "kube_pod_status_phase",
                "legendFormat": "{{phase}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 6,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "节点CPU使用率",
            "type": "timeseries",
            "targets": [
              {
                "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "节点内存使用率",
            "type": "timeseries",
            "targets": [
              {
                "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 16
            }
          },
          {
            "id": 5,
            "title": "网络流量",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(node_network_receive_bytes_total[5m])",
                "legendFormat": "接收 - {{device}}"
              },
              {
                "expr": "rate(node_network_transmit_bytes_total[5m])",
                "legendFormat": "发送 - {{device}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 16
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# 📊 ConfigMap - 应用监控仪表板
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-application
  namespace: monitoring
  labels:
    app: grafana
    dashboard: application
data:
  application-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Figma Frame Faithful 应用监控",
        "tags": ["application", "figma-frame-faithful"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "服务可用性",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"figma-frame-faithful-app\"}",
                "legendFormat": "{{instance}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "red",
                      "value": null
                    },
                    {
                      "color": "green",
                      "value": 1
                    }
                  ]
                },
                "unit": "bool"
              }
            },
            "gridPos": {
              "h": 4,
              "w": 6,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "HTTP请求速率",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(nginx_ingress_controller_requests_total{ingress=\"figma-frame-faithful\"}[5m])",
                "legendFormat": "{{status}} - {{method}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 6,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "响应时间分布",
            "type": "timeseries",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, rate(nginx_ingress_controller_request_duration_seconds_bucket{ingress=\"figma-frame-faithful\"}[5m]))",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, rate(nginx_ingress_controller_request_duration_seconds_bucket{ingress=\"figma-frame-faithful\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, rate(nginx_ingress_controller_request_duration_seconds_bucket{ingress=\"figma-frame-faithful\"}[5m]))",
                "legendFormat": "99th percentile"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "错误率",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(nginx_ingress_controller_requests_total{ingress=\"figma-frame-faithful\",status=~\"4..\"}[5m])",
                "legendFormat": "4xx错误"
              },
              {
                "expr": "rate(nginx_ingress_controller_requests_total{ingress=\"figma-frame-faithful\",status=~\"5..\"}[5m])",
                "legendFormat": "5xx错误"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 16
            }
          },
          {
            "id": 5,
            "title": "Pod资源使用",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\"figma-frame-faithful-.*\"}[5m]) * 100",
                "legendFormat": "CPU - {{pod}}"
              },
              {
                "expr": "container_memory_usage_bytes{pod=~\"figma-frame-faithful-.*\"} / 1024 / 1024",
                "legendFormat": "内存 - {{pod}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 16
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# 🏪 PersistentVolumeClaim - Grafana数据存储
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# 🚀 Deployment - Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-secret
              key: password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
          readOnly: true
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-dashboard-kubernetes
          mountPath: /var/lib/grafana/dashboards/kubernetes-dashboard.json
          subPath: kubernetes-dashboard.json
          readOnly: true
        - name: grafana-dashboard-application
          mountPath: /var/lib/grafana/dashboards/application-dashboard.json
          subPath: application-dashboard.json
          readOnly: true
        - name: grafana-storage
          mountPath: /var/lib/grafana
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboard-kubernetes
        configMap:
          name: grafana-dashboard-kubernetes
      - name: grafana-dashboard-application
        configMap:
          name: grafana-dashboard-application
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc

---
# 🌐 Service - Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
  - name: grafana
    port: 3000
    targetPort: grafana
    protocol: TCP
  selector:
    app: grafana

---
# 🔐 Secret - Grafana管理员密码
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-secret
  namespace: monitoring
  labels:
    app: grafana
type: Opaque
data:
  password: YWRtaW4xMjMhQCM=  # admin123!@# (base64编码)