# ⏰ 定时备份任务配置
# 使用Kubernetes CronJob自动执行各种类型的备份

# 📊 数据库备份任务
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: backup
  labels:
    app: backup-system
    backup-type: database
spec:
  schedule: "0 2 * * *"  # 每天凌晨2点执行
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid  # 禁止并发执行
  jobTemplate:
    spec:
      activeDeadlineSeconds: 3600  # 1小时超时
      template:
        metadata:
          labels:
            app: backup-system
            backup-type: database
        spec:
          serviceAccountName: backup-service
          restartPolicy: OnFailure
          containers:
          - name: database-backup
            image: ubuntu:22.04
            command:
            - /bin/bash
            - -c
            - |
              # 安装必要工具
              apt-get update && apt-get install -y \
                curl wget unzip awscli postgresql-client-14
              
              # 安装Supabase CLI
              curl -fsSL https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | \
                tar -xz --strip-components=1 -C /usr/local/bin
              
              # 加载配置
              source /etc/backup/backup.conf
              
              # 设置AWS凭证
              export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
              export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
              export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
              
              # 执行备份脚本
              /scripts/backup-supabase.sh
              
              # 发送通知
              if [[ "$?" -eq 0 ]]; then
                /scripts/send-notification.sh "✅ 数据库备份成功" "success"
              else
                /scripts/send-notification.sh "❌ 数据库备份失败" "error"
                exit 1
              fi
            env:
            - name: SUPABASE_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: supabase-credentials
                  key: access-token
                  optional: true
            - name: SUPABASE_DB_URL
              valueFrom:
                secretKeyRef:
                  name: supabase-credentials  
                  key: database-url
                  optional: true
            envFrom:
            - secretRef:
                name: aws-credentials
            - configMapRef:
                name: backup-config
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
              readOnly: true
            - name: backup-config-vol
              mountPath: /etc/backup
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-config
              defaultMode: 0755
              items:
              - key: backup-supabase.sh
                path: backup-supabase.sh
              - key: send-notification.sh
                path: send-notification.sh
          - name: backup-config-vol
            configMap:
              name: backup-config
              items:
              - key: backup.conf
                path: backup.conf

---
# ⚙️ Kubernetes配置备份任务
apiVersion: batch/v1
kind: CronJob
metadata:
  name: k8s-config-backup
  namespace: backup
  labels:
    app: backup-system
    backup-type: kubernetes-config
spec:
  schedule: "0 1 * * 0"  # 每周日凌晨1点执行
  successfulJobsHistoryLimit: 4
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 1800  # 30分钟超时
      template:
        metadata:
          labels:
            app: backup-system
            backup-type: kubernetes-config
        spec:
          serviceAccountName: backup-service
          restartPolicy: OnFailure
          containers:
          - name: k8s-config-backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              # 安装AWS CLI
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              
              # 加载配置
              source /etc/backup/backup.conf
              
              # 设置AWS凭证
              export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
              export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
              export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
              
              # 执行备份脚本
              /scripts/backup-k8s-config.sh
              
              # 发送通知
              if [[ "$?" -eq 0 ]]; then
                /scripts/send-notification.sh "✅ Kubernetes配置备份成功" "success"
              else
                /scripts/send-notification.sh "❌ Kubernetes配置备份失败" "error"
                exit 1
              fi
            envFrom:
            - secretRef:
                name: aws-credentials
            - configMapRef:
                name: backup-config
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
              readOnly: true
            - name: backup-config-vol
              mountPath: /etc/backup
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "300m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-config
              defaultMode: 0755
              items:
              - key: backup-k8s-config.sh
                path: backup-k8s-config.sh
              - key: send-notification.sh
                path: send-notification.sh
          - name: backup-config-vol
            configMap:
              name: backup-config
              items:
              - key: backup.conf
                path: backup.conf

---
# 📱 应用数据备份任务
apiVersion: batch/v1
kind: CronJob
metadata:
  name: app-data-backup
  namespace: backup
  labels:
    app: backup-system
    backup-type: application-data
spec:
  schedule: "0 3 * * *"  # 每天凌晨3点执行
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 2400  # 40分钟超时
      template:
        metadata:
          labels:
            app: backup-system
            backup-type: application-data
        spec:
          serviceAccountName: backup-service
          restartPolicy: OnFailure
          containers:
          - name: app-data-backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              # 安装必要工具
              apt-get update && apt-get install -y curl unzip redis-tools
              
              # 安装AWS CLI
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              
              # 加载配置
              source /etc/backup/backup.conf
              
              # 设置AWS凭证
              export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
              export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
              export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
              
              # 执行备份脚本
              /scripts/backup-app-data.sh
              
              # 发送通知
              if [[ "$?" -eq 0 ]]; then
                /scripts/send-notification.sh "✅ 应用数据备份成功" "success"
              else
                /scripts/send-notification.sh "❌ 应用数据备份失败" "error"
                exit 1
              fi
            envFrom:
            - secretRef:
                name: aws-credentials
            - configMapRef:
                name: backup-config
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
              readOnly: true
            - name: backup-config-vol
              mountPath: /etc/backup
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "300m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-config
              defaultMode: 0755
              items:
              - key: backup-app-data.sh
                path: backup-app-data.sh
              - key: send-notification.sh
                path: send-notification.sh
          - name: backup-config-vol
            configMap:
              name: backup-config
              items:
              - key: backup.conf
                path: backup.conf

---
# 📊 监控数据备份任务
apiVersion: batch/v1
kind: CronJob
metadata:
  name: monitoring-backup
  namespace: backup
  labels:
    app: backup-system
    backup-type: monitoring-data
spec:
  schedule: "0 4 * * *"  # 每天凌晨4点执行
  successfulJobsHistoryLimit: 14
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 3600  # 1小时超时
      template:
        metadata:
          labels:
            app: backup-system
            backup-type: monitoring-data
        spec:
          serviceAccountName: backup-service
          restartPolicy: OnFailure
          containers:
          - name: monitoring-backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              # 安装必要工具
              apt-get update && apt-get install -y curl unzip
              
              # 安装AWS CLI
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              
              # 加载配置
              source /etc/backup/backup.conf
              
              # 设置AWS凭证
              export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
              export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
              export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
              
              # 执行备份脚本
              /scripts/backup-monitoring.sh
              
              # 发送通知
              if [[ "$?" -eq 0 ]]; then
                /scripts/send-notification.sh "✅ 监控数据备份成功" "success"
              else
                /scripts/send-notification.sh "❌ 监控数据备份失败" "error"
                exit 1
              fi
            envFrom:
            - secretRef:
                name: aws-credentials
            - configMapRef:
                name: backup-config
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
              readOnly: true
            - name: backup-config-vol
              mountPath: /etc/backup
              readOnly: true
            resources:
              requests:
                memory: "512Mi"
                cpu: "200m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-config
              defaultMode: 0755
              items:
              - key: backup-monitoring.sh
                path: backup-monitoring.sh
              - key: send-notification.sh
                path: send-notification.sh
          - name: backup-config-vol
            configMap:
              name: backup-config
              items:
              - key: backup.conf
                path: backup.conf

---
# 🧹 备份清理任务
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cleanup
  namespace: backup
  labels:
    app: backup-system
    backup-type: cleanup
spec:
  schedule: "0 5 * * 0"  # 每周日凌晨5点执行清理
  successfulJobsHistoryLimit: 4
  failedJobsHistoryLimit: 2
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 1800  # 30分钟超时
      template:
        metadata:
          labels:
            app: backup-system
            backup-type: cleanup
        spec:
          serviceAccountName: backup-service
          restartPolicy: OnFailure
          containers:
          - name: backup-cleanup
            image: amazon/aws-cli:latest
            command:
            - /bin/bash
            - -c
            - |
              # 加载配置
              source /etc/backup/backup.conf
              
              log() {
                echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
              }
              
              log "开始清理过期备份..."
              
              # 清理数据库备份 (保留7天)
              log "清理数据库备份..."
              aws s3 ls "s3://${S3_BUCKET}/database/" --recursive | \
                awk '$1 <= "'$(date -d "${DB_BACKUP_RETENTION} days ago" '+%Y-%m-%d')'" {print $4}' | \
                xargs -I {} aws s3 rm "s3://${S3_BUCKET}/{}"
              
              # 清理应用数据备份 (保留7天)
              log "清理应用数据备份..."
              aws s3 ls "s3://${S3_BUCKET}/app-data/" --recursive | \
                awk '$1 <= "'$(date -d "${APP_BACKUP_RETENTION} days ago" '+%Y-%m-%d')'" {print $4}' | \
                xargs -I {} aws s3 rm "s3://${S3_BUCKET}/{}"
              
              # 清理监控数据备份 (保留14天)
              log "清理监控数据备份..."
              aws s3 ls "s3://${S3_BUCKET}/monitoring/" --recursive | \
                awk '$1 <= "'$(date -d "${MONITORING_BACKUP_RETENTION} days ago" '+%Y-%m-%d')'" {print $4}' | \
                xargs -I {} aws s3 rm "s3://${S3_BUCKET}/{}"
              
              # 清理配置备份 (保留30天)
              log "清理配置备份..."
              aws s3 ls "s3://${S3_BUCKET}/kubernetes-config/" --recursive | \
                awk '$1 <= "'$(date -d "${CONFIG_BACKUP_RETENTION} days ago" '+%Y-%m-%d')'" {print $4}' | \
                xargs -I {} aws s3 rm "s3://${S3_BUCKET}/{}"
              
              log "备份清理完成"
              
              # 发送通知
              /scripts/send-notification.sh "🧹 备份清理任务完成" "info"
            envFrom:
            - secretRef:
                name: aws-credentials
            - configMapRef:
                name: backup-config
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
              readOnly: true
            - name: backup-config-vol
              mountPath: /etc/backup
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: backup-scripts
            configMap:
              name: backup-config
              defaultMode: 0755
              items:
              - key: send-notification.sh
                path: send-notification.sh
          - name: backup-config-vol
            configMap:
              name: backup-config
              items:
              - key: backup.conf
                path: backup.conf