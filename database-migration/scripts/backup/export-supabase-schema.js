#!/usr/bin/env node

/**
 * ÂØºÂá∫SupabaseÊï∞ÊçÆÂ∫ìÁªìÊûÑÂ§á‰ªΩËÑöÊú¨
 * Áî®‰∫éËÆ∞ÂΩïÁé∞ÊúâË°®ÁªìÊûÑÂíåÂÖ≥Á≥ª
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs').promises;
const path = require('path');

// SupabaseÈÖçÁΩÆ
const SUPABASE_URL = 'https://giluhqotfjpmofowvogn.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdpbHVocW90ZmpwbW9mb3d2b2duIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzMDIwMDQsImV4cCI6MjA2MDg3ODAwNH0.NkVIqDlRM-qh8HoFR-nZMfXKWT0lDMeNSk5EPJiprZQ';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

/**
 * ÂØºÂá∫ÊâÄÊúâË°®ÁöÑÁªìÊûÑ‰ø°ÊÅØ
 */
async function exportTableSchemas() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const outputDir = path.join(__dirname, '../../docs/backup', timestamp);
  
  // ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
  await fs.mkdir(outputDir, { recursive: true });
  
  console.log('üì¶ ÂºÄÂßãÂØºÂá∫SupabaseÊï∞ÊçÆÂ∫ìÁªìÊûÑ...');
  console.log(`üìÅ ËæìÂá∫ÁõÆÂΩï: ${outputDir}`);
  
  // Ëé∑ÂèñÊâÄÊúâË°®‰ø°ÊÅØÁöÑSQLÊü•ËØ¢
  const queries = {
    // 1. Ëé∑ÂèñÊâÄÊúâË°®ÂàóË°®
    tables: `
      SELECT 
        t.table_name,
        obj_description(pgc.oid, 'pg_class') as table_comment,
        COUNT(c.column_name) as column_count,
        pg_size_pretty(pg_total_relation_size(pgc.oid)) as total_size
      FROM information_schema.tables t
      LEFT JOIN information_schema.columns c ON t.table_name = c.table_name AND t.table_schema = c.table_schema
      LEFT JOIN pg_class pgc ON pgc.relname = t.table_name
      WHERE t.table_schema = 'public' 
      AND t.table_type = 'BASE TABLE'
      GROUP BY t.table_name, pgc.oid
      ORDER BY t.table_name;
    `,
    
    // 2. Ëé∑ÂèñË°®ÁöÑÂàó‰ø°ÊÅØ
    columns: `
      SELECT 
        table_name,
        column_name,
        data_type,
        is_nullable,
        column_default,
        character_maximum_length,
        numeric_precision,
        numeric_scale
      FROM information_schema.columns
      WHERE table_schema = 'public'
      ORDER BY table_name, ordinal_position;
    `,
    
    // 3. Ëé∑Âèñ‰∏ªÈîÆ‰ø°ÊÅØ
    primaryKeys: `
      SELECT
        tc.table_name,
        string_agg(kcu.column_name, ', ' ORDER BY kcu.ordinal_position) as primary_key_columns
      FROM information_schema.table_constraints tc
      JOIN information_schema.key_column_usage kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      WHERE tc.constraint_type = 'PRIMARY KEY'
        AND tc.table_schema = 'public'
      GROUP BY tc.table_name
      ORDER BY tc.table_name;
    `,
    
    // 4. Ëé∑ÂèñÂ§ñÈîÆÂÖ≥Á≥ª
    foreignKeys: `
      SELECT
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name,
        tc.constraint_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
        AND ccu.table_schema = tc.table_schema
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_schema = 'public'
      ORDER BY tc.table_name, kcu.ordinal_position;
    `,
    
    // 5. Ëé∑ÂèñÁ¥¢Âºï‰ø°ÊÅØ
    indexes: `
      SELECT
        tablename,
        indexname,
        indexdef
      FROM pg_indexes
      WHERE schemaname = 'public'
      ORDER BY tablename, indexname;
    `,
    
    // 6. ÁªüËÆ°Êï∞ÊçÆÈáè
    rowCounts: `
      SELECT 
        'students' as table_name, COUNT(*) as row_count FROM students
      UNION ALL
      SELECT 'grade_data_new', COUNT(*) FROM grade_data_new  
      UNION ALL
      SELECT 'grades', COUNT(*) FROM grades
      UNION ALL
      SELECT 'classes', COUNT(*) FROM classes
      UNION ALL
      SELECT 'class_info', COUNT(*) FROM class_info
      UNION ALL
      SELECT 'homework', COUNT(*) FROM homework
      UNION ALL
      SELECT 'homework_submissions', COUNT(*) FROM homework_submissions
      UNION ALL
      SELECT 'warning_records', COUNT(*) FROM warning_records
      UNION ALL
      SELECT 'warning_rules', COUNT(*) FROM warning_rules
      ORDER BY row_count DESC;
    `
  };
  
  const results = {};
  
  // ÊâßË°åÊâÄÊúâÊü•ËØ¢
  for (const [key, query] of Object.entries(queries)) {
    try {
      console.log(`üìä Ê≠£Âú®Êü•ËØ¢${key}...`);
      const { data, error } = await supabase.rpc('exec_sql', { query });
      
      if (error) {
        console.error(`‚ùå Êü•ËØ¢${key}Â§±Ë¥•:`, error);
        results[key] = { error: error.message };
      } else {
        results[key] = data;
        console.log(`‚úÖ ${key}Êü•ËØ¢ÂÆåÊàêÔºåËé∑ÂèñÂà∞${data?.length || 0}Êù°ËÆ∞ÂΩï`);
      }
    } catch (err) {
      console.error(`‚ùå Êü•ËØ¢${key}ÂºÇÂ∏∏:`, err);
      results[key] = { error: err.message };
    }
  }
  
  // ‰øùÂ≠òÁªìÊûú
  const schemaFile = path.join(outputDir, 'database-schema.json');
  await fs.writeFile(schemaFile, JSON.stringify(results, null, 2));
  console.log(`üìÑ Êï∞ÊçÆÂ∫ìÁªìÊûÑÂ∑≤‰øùÂ≠òÂà∞: ${schemaFile}`);
  
  // ÁîüÊàêMarkdownÊñáÊ°£
  const markdown = generateMarkdownDoc(results);
  const mdFile = path.join(outputDir, 'database-schema.md');
  await fs.writeFile(mdFile, markdown);
  console.log(`üìù MarkdownÊñáÊ°£Â∑≤ÁîüÊàê: ${mdFile}`);
  
  return results;
}

/**
 * ÁîüÊàêMarkdownÊ†ºÂºèÁöÑÊñáÊ°£
 */
function generateMarkdownDoc(results) {
  let md = '# SupabaseÊï∞ÊçÆÂ∫ìÁªìÊûÑÂ§á‰ªΩ\n\n';
  md += `ÁîüÊàêÊó∂Èó¥: ${new Date().toISOString()}\n\n`;
  
  // Ë°®Ê¶ÇËßà
  md += '## üìä Ë°®Ê¶ÇËßà\n\n';
  if (results.tables && Array.isArray(results.tables)) {
    md += '| Ë°®Âêç | ËØ¥Êòé | ÂàóÊï∞ | Â§ßÂ∞è |\n';
    md += '|------|------|------|------|\n';
    results.tables.forEach(table => {
      md += `| ${table.table_name} | ${table.table_comment || '-'} | ${table.column_count} | ${table.total_size || '-'} |\n`;
    });
  }
  
  // Êï∞ÊçÆÁªüËÆ°
  md += '\n## üìà Êï∞ÊçÆÁªüËÆ°\n\n';
  if (results.rowCounts && Array.isArray(results.rowCounts)) {
    md += '| Ë°®Âêç | ËÆ∞ÂΩïÊï∞ |\n';
    md += '|------|--------|\n';
    results.rowCounts.forEach(stat => {
      md += `| ${stat.table_name} | ${stat.row_count} |\n`;
    });
  }
  
  // Ë°®ÁªìÊûÑËØ¶ÊÉÖ
  md += '\n## üóÇÔ∏è Ë°®ÁªìÊûÑËØ¶ÊÉÖ\n\n';
  if (results.columns && Array.isArray(results.columns)) {
    const tableColumns = {};
    results.columns.forEach(col => {
      if (!tableColumns[col.table_name]) {
        tableColumns[col.table_name] = [];
      }
      tableColumns[col.table_name].push(col);
    });
    
    Object.keys(tableColumns).sort().forEach(tableName => {
      md += `### ${tableName}\n\n`;
      md += '| ÂàóÂêç | Êï∞ÊçÆÁ±ªÂûã | ÂÖÅËÆ∏Á©∫ | ÈªòËÆ§ÂÄº |\n';
      md += '|------|----------|--------|--------|\n';
      tableColumns[tableName].forEach(col => {
        md += `| ${col.column_name} | ${col.data_type} | ${col.is_nullable} | ${col.column_default || '-'} |\n`;
      });
      md += '\n';
    });
  }
  
  // Â§ñÈîÆÂÖ≥Á≥ª
  md += '\n## üîó Â§ñÈîÆÂÖ≥Á≥ª\n\n';
  if (results.foreignKeys && Array.isArray(results.foreignKeys)) {
    md += '| Ë°®Âêç | ÂàóÂêç | ÂºïÁî®Ë°® | ÂºïÁî®Âàó |\n';
    md += '|------|------|--------|--------|\n';
    results.foreignKeys.forEach(fk => {
      md += `| ${fk.table_name} | ${fk.column_name} | ${fk.foreign_table_name} | ${fk.foreign_column_name} |\n`;
    });
  }
  
  return md;
}

// ÊâßË°åÂØºÂá∫
if (require.main === module) {
  exportTableSchemas()
    .then(() => {
      console.log('‚úÖ Êï∞ÊçÆÂ∫ìÁªìÊûÑÂØºÂá∫ÂÆåÊàêÔºÅ');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå ÂØºÂá∫Â§±Ë¥•:', error);
      process.exit(1);
    });
}

module.exports = { exportTableSchemas };