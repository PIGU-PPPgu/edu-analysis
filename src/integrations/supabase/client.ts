// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';
import { env } from '@/env';

// 使用环境变量
const SUPABASE_URL = env.SUPABASE_URL;
const SUPABASE_ANON_KEY = env.SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// 创建Supabase客户端配置
const supabaseConfig = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    // 添加错误处理，防止离线状态下持续请求
    networkRetries: 0,
  },
  // 全局错误处理
  global: {
    fetch: (...args) => {
      // 检查网络连接
      if (!navigator.onLine) {
        console.warn('网络连接已断开，Supabase请求已暂停');
        return Promise.reject(new Error('网络已断开连接'));
      }
      return fetch(...args);
    },
  },
};

// 创建唯一的Supabase客户端实例
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, supabaseConfig);

// 实时频道管理函数 - 而不是创建新的客户端实例
export const enableRealtimeChannel = (channelName: string) => {
  return supabase.channel(channelName, {
    config: {
      broadcast: { self: true },
      presence: { key: '' },
    }
  });
};

// 添加网络状态监听
if (typeof window !== 'undefined') {
  window.addEventListener('online', () => {
    console.log('网络已恢复连接，Supabase服务可用');
  });
  
  window.addEventListener('offline', () => {
    console.warn('网络已断开连接，Supabase服务不可用');
  });
}

/**
 * 检查表是否存在
 * @param tableName 要检查的表名
 * @returns 检查结果 {exists: boolean, error?: any}
 */
export const checkTableExists = async (tableName: string) => {
  try {
    console.log(`[Supabase] 检查表 ${tableName} 是否存在...`);
    
    // 首先尝试使用 RPC 函数
    const { data: rpcData, error: rpcError } = await supabase.rpc('table_exists', { table_name: tableName });
    
    if (!rpcError && rpcData && rpcData.length > 0) {
      const exists = rpcData[0].exists;
      console.log(`[Supabase] 通过RPC检查表 ${tableName} ${exists ? '存在' : '不存在'}`);
      return { exists };
    }
    
    console.log(`[Supabase] RPC 检查失败 (${rpcError?.message || 'unknown'}), 尝试直接查询...`);
    
    // 如果RPC调用失败，尝试直接查询表
    try {
      const { data, error, status } = await supabase
        .from(tableName)
        .select('*', { count: 'exact', head: true })
        .limit(1);
      
      // 如果查询没有返回错误，表必然存在
      if (!error) {
        console.log(`[Supabase] 表 ${tableName} 存在 (通过直接查询)`);
        return { exists: true };
      }
      
      // 检查错误代码，42P01是表不存在的PostgreSQL错误
      if (error.code === '42P01') {
        console.log(`[Supabase] 表 ${tableName} 不存在 (确认通过错误代码 42P01)`);
        return { exists: false };
      }
      
      // 其他错误可能是权限问题等，记录详细信息
      console.warn(`[Supabase] 查询表 ${tableName} 时出现错误: ${error.message} (代码: ${error.code})`);
      
      // 如果是权限错误，可能表存在但无权访问
      if (error.code?.startsWith('42') || error.code?.startsWith('28')) {
        console.log(`[Supabase] 表 ${tableName} 可能存在但无权访问`);
        return { exists: true, error };
      }
      
      return { exists: false, error };
    } catch (queryError) {
      console.error(`[Supabase] 直接查询表 ${tableName} 异常:`, queryError);
      return { exists: false, error: queryError };
    }
  } catch (error) {
    console.error(`[Supabase] 检查表 ${tableName} 存在性过程中出现异常:`, error);
    return { exists: false, error };
  }
};

/**
 * 执行SQL迁移脚本
 * @param sql SQL脚本内容
 * @param name 迁移名称(可选)
 * @returns 执行结果
 */
export const runMigration = async (sql: string, name?: string) => {
  try {
    console.log(`尝试执行${name ? `迁移[${name}]` : 'SQL脚本'}...`);
    
    // 检查是否有exec_sql函数
    const { data: functions, error: functionCheckError } = await supabase
      .rpc('get_stored_procedures')
      .select('*');
    
    if (functionCheckError) {
      console.error('检查RPC函数时出错:', functionCheckError);
      
      // 提供备用方案
      return { 
        success: false, 
        message: `exec_sql函数不存在，请在Supabase管理面板中手动执行以下SQL：\n\n${sql}` 
      };
    }
    
    // 如果存在exec_sql函数，则调用它
    if (functions && functions.some(fn => fn.name === 'exec_sql')) {
    const { error } = await supabase.rpc('exec_sql', { sql_query: sql });
    
    if (error) {
      console.error(`迁移失败: ${error.message}`);
      return { 
        success: false, 
        message: `迁移失败: ${error.message}` 
      };
    }
    
    console.log(`迁移${name ? `[${name}]` : ''}成功完成`);
    return { 
      success: true, 
      message: `迁移${name ? `[${name}]` : ''}成功完成` 
    };
    } else {
      // 如果不存在exec_sql函数，则返回SQL供用户手动执行
      return { 
        success: false, 
        message: `exec_sql函数不存在，请在Supabase管理面板中手动执行以下SQL：\n\n${sql}` 
      };
    }
  } catch (error) {
    console.error('执行迁移时出错:', error);
    return { 
      success: false, 
      message: `执行迁移时出错: ${error.message}\n\n请手动执行SQL：\n\n${sql}` 
    };
  }
};