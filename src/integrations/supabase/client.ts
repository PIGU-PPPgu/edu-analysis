// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';
import { env } from '@/env';

// 使用环境变量
const SUPABASE_URL = env.SUPABASE_URL;
const SUPABASE_ANON_KEY = env.SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// 创建Supabase客户端配置
const supabaseConfig = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    // 添加错误处理，防止离线状态下持续请求
    networkRetries: 0,
  },
  // 全局错误处理
  global: {
    fetch: (...args) => {
      // 检查网络连接
      if (!navigator.onLine) {
        console.warn('网络连接已断开，Supabase请求已暂停');
        return Promise.reject(new Error('网络已断开连接'));
      }
      return fetch(...args);
    },
  },
};

// 创建唯一的Supabase客户端实例
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, supabaseConfig);

// 实时频道管理函数 - 而不是创建新的客户端实例
export const enableRealtimeChannel = (channelName: string) => {
  return supabase.channel(channelName, {
    config: {
      broadcast: { self: true },
      presence: { key: '' },
    }
  });
};

// 添加网络状态监听
if (typeof window !== 'undefined') {
  window.addEventListener('online', () => {
    console.log('网络已恢复连接，Supabase服务可用');
  });
  
  window.addEventListener('offline', () => {
    console.warn('网络已断开连接，Supabase服务不可用');
  });
}

/**
 * 执行SQL迁移脚本
 * @param sql SQL脚本内容
 * @param name 迁移名称(可选)
 * @returns 执行结果
 */
export const runMigration = async (sql: string, name?: string) => {
  try {
    console.log(`执行${name ? `迁移[${name}]` : 'SQL脚本'}...`);
    const { error } = await supabase.rpc('exec_sql', { sql });
    
    if (error) {
      console.error(`迁移失败: ${error.message}`);
      return { 
        success: false, 
        message: `迁移失败: ${error.message}` 
      };
    }
    
    console.log(`迁移${name ? `[${name}]` : ''}成功完成`);
    return { 
      success: true, 
      message: `迁移${name ? `[${name}]` : ''}成功完成` 
    };
  } catch (error) {
    console.error('执行迁移时出错:', error);
    return { 
      success: false, 
      message: `执行迁移时出错: ${error.message}` 
    };
  }
};