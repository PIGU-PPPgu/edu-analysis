/**
 * üéØ ÊÄßËÉΩÊµãËØïÂ∑•ÂÖ∑
 * Áî®‰∫éÈ™åËØÅOptimizedGradeDataTableÁöÑÊÄßËÉΩ‰ºòÂåñÊïàÊûú
 */

export interface PerformanceMetrics {
  renderTime: number;
  componentCount: number;
  memoryUsage?: number;
  averageRenderTime: number;
  maxRenderTime: number;
  minRenderTime: number;
}

export class PerformanceMonitor {
  private renderTimes: number[] = [];
  private renderCount = 0;

  // ÂºÄÂßãÊÄßËÉΩÁõëÊéß
  startRender(): void {
    performance.mark("render-start");
  }

  // ÁªìÊùüÊÄßËÉΩÁõëÊéß
  endRender(): PerformanceMetrics {
    performance.mark("render-end");
    performance.measure("render-time", "render-start", "render-end");

    const measure = performance.getEntriesByName("render-time")[0];
    const renderTime = measure.duration;

    this.renderTimes.push(renderTime);
    this.renderCount++;

    const metrics: PerformanceMetrics = {
      renderTime,
      componentCount: this.renderCount,
      averageRenderTime:
        this.renderTimes.reduce((a, b) => a + b, 0) / this.renderTimes.length,
      maxRenderTime: Math.max(...this.renderTimes),
      minRenderTime: Math.min(...this.renderTimes),
    };

    // Ëé∑ÂèñÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµÔºàÂ¶ÇÊûúÊµèËßàÂô®ÊîØÊåÅÔºâ
    if ("memory" in performance) {
      metrics.memoryUsage = (performance as any).memory.usedJSHeapSize;
    }

    // Ê∏ÖÁêÜÊÄßËÉΩÊ†áËÆ∞
    performance.clearMarks();
    performance.clearMeasures();

    return metrics;
  }

  // ÈáçÁΩÆÁõëÊéßÊï∞ÊçÆ
  reset(): void {
    this.renderTimes = [];
    this.renderCount = 0;
  }

  // Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØ
  getStats(): PerformanceMetrics | null {
    if (this.renderTimes.length === 0) return null;

    return {
      renderTime: this.renderTimes[this.renderTimes.length - 1],
      componentCount: this.renderCount,
      averageRenderTime:
        this.renderTimes.reduce((a, b) => a + b, 0) / this.renderTimes.length,
      maxRenderTime: Math.max(...this.renderTimes),
      minRenderTime: Math.min(...this.renderTimes),
    };
  }

  // Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®ÊÄßËÉΩÈóÆÈ¢ò
  hasPerformanceIssues(): boolean {
    const stats = this.getStats();
    if (!stats) return false;

    // Â¶ÇÊûúÂπ≥ÂùáÊ∏≤ÊüìÊó∂Èó¥Ë∂ÖËøá100msÔºåËÆ§‰∏∫ÊúâÊÄßËÉΩÈóÆÈ¢ò
    return stats.averageRenderTime > 100 || stats.maxRenderTime > 1000;
  }

  // ÁîüÊàêÊÄßËÉΩÊä•Âëä
  generateReport(): string {
    const stats = this.getStats();
    if (!stats) return "No performance data available";

    const hasIssues = this.hasPerformanceIssues();

    return `
üéØ VirtualRow Performance Report
================================
ÊÄªÊ∏≤ÊüìÊ¨°Êï∞: ${stats.componentCount}
Âπ≥ÂùáÊ∏≤ÊüìÊó∂Èó¥: ${stats.averageRenderTime.toFixed(2)}ms
ÊúÄÂ§ßÊ∏≤ÊüìÊó∂Èó¥: ${stats.maxRenderTime.toFixed(2)}ms  
ÊúÄÂ∞èÊ∏≤ÊüìÊó∂Èó¥: ${stats.minRenderTime.toFixed(2)}ms
${stats.memoryUsage ? `ÂÜÖÂ≠ò‰ΩøÁî®: ${(stats.memoryUsage / 1024 / 1024).toFixed(2)}MB` : ""}

${hasIssues ? "‚ö†Ô∏è Ê£ÄÊµãÂà∞ÊÄßËÉΩÈóÆÈ¢ò" : "‚úÖ ÊÄßËÉΩË°®Áé∞ËâØÂ•Ω"}

‰ºòÂåñÂª∫ËÆÆ:
${stats.averageRenderTime > 100 ? "- ËÄÉËôëËøõ‰∏ÄÊ≠•‰ºòÂåñÊ∏≤ÊüìÈÄªËæë" : ""}
${stats.maxRenderTime > 1000 ? "- Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®ÈòªÂ°ûÊìç‰Ωú" : ""}
${hasIssues ? "- ÂêØÁî®React.memoÂíåuseCallback‰ºòÂåñ" : ""}
    `;
  }
}

// ÂÖ®Â±ÄÊÄßËÉΩÁõëÊéßÂÆû‰æã
export const performanceMonitor = new PerformanceMonitor();

// ÊÄßËÉΩÊµãËØïHook
export const usePerformanceTest = (componentName: string) => {
  const monitor = new PerformanceMonitor();

  const startTest = () => {
    console.log(`üéØ Starting performance test for ${componentName}`);
    monitor.startRender();
  };

  const endTest = () => {
    const metrics = monitor.endRender();
    console.log(`üéØ Performance test completed for ${componentName}:`, metrics);

    if (metrics.renderTime > 1000) {
      console.warn(
        `‚ö†Ô∏è Slow render detected: ${metrics.renderTime.toFixed(2)}ms`
      );
    }

    return metrics;
  };

  return { startTest, endTest, monitor };
};
