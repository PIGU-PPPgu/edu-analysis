name: üöÄ Continuous Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: üèóÔ∏è Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      python-image: ${{ steps.meta-python.outputs.tags }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Frontend Image
    - name: üìã Extract metadata (frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: üèóÔ∏è Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Backend Image  
    - name: üìã Extract metadata (backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: üèóÔ∏è Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Python Service Image
    - name: üìã Extract metadata (python)
      id: meta-python
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-python
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: üèóÔ∏è Build and push python service
      uses: docker/build-push-action@v5
      with:
        context: ./python-data-processor
        push: true
        tags: ${{ steps.meta-python.outputs.tags }}
        labels: ${{ steps.meta-python.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup deployment environment
      run: |
        echo "üîß Setting up staging environment..."
        echo "Frontend Image: ${{ needs.build-and-push.outputs.frontend-image }}"
        echo "Backend Image: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Python Image: ${{ needs.build-and-push.outputs.python-image }}"
        
    - name: üìã Create deployment manifest
      run: |
        cat > docker-compose.prod.yml << EOF
        version: '3.8'
        
        services:
          frontend:
            image: ${{ needs.build-and-push.outputs.frontend-image }}
            ports:
              - "8080:8080"
            environment:
              - NODE_ENV=production
              - VITE_SUPABASE_URL=\${VITE_SUPABASE_URL}
              - VITE_SUPABASE_ANON_KEY=\${VITE_SUPABASE_ANON_KEY}
            restart: unless-stopped
            
          backend:
            image: ${{ needs.build-and-push.outputs.backend-image }}
            ports:
              - "3001:3001"
            environment:
              - NODE_ENV=production
            restart: unless-stopped
            
          python-service:
            image: ${{ needs.build-and-push.outputs.python-image }}
            ports:
              - "5000:5000"
            environment:
              - FLASK_ENV=production
            restart: unless-stopped
        EOF
        
    - name: üè• Run deployment verification
      run: |
        echo "üß™ Running deployment verification tests..."
        
        # Create test environment file
        echo "VITE_SUPABASE_URL=test-url" > .env.test
        echo "VITE_SUPABASE_ANON_KEY=test-key" >> .env.test
        
        # Verify deployment manifest
        docker-compose -f docker-compose.prod.yml config
        
        echo "‚úÖ Deployment verification passed"
        
    - name: üìä Deployment Summary
      run: |
        echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Image | Status |" >> $GITHUB_STEP_SUMMARY  
        echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | \`${{ needs.build-and-push.outputs.frontend-image }}\` | ‚úÖ Ready |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | \`${{ needs.build-and-push.outputs.backend-image }}\` | ‚úÖ Ready |" >> $GITHUB_STEP_SUMMARY
        echo "| Python | \`${{ needs.build-and-push.outputs.python-image }}\` | ‚úÖ Ready |" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Production deployment verification
      run: |
        echo "üîê Verifying production deployment prerequisites..."
        
        # Check required secrets (customize as needed)
        if [ -z "${{ secrets.SUPABASE_URL }}" ] || [ -z "${{ secrets.SUPABASE_ANON_KEY }}" ]; then
          echo "‚ùå Missing required production secrets"
          exit 1
        fi
        
        echo "‚úÖ Production secrets verified"
        
    - name: üöÄ Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Frontend Image: ${{ needs.build-and-push.outputs.frontend-image }}"
        echo "Backend Image: ${{ needs.build-and-push.outputs.backend-image }}"
        echo "Python Image: ${{ needs.build-and-push.outputs.python-image }}"
        
        # Here you would typically deploy to your production infrastructure
        # Examples: 
        # - Deploy to Kubernetes cluster
        # - Deploy to Docker Swarm
        # - Deploy to cloud platform (AWS ECS, GCP Cloud Run, etc.)
        # - Update docker-compose on production server
        
        echo "‚úÖ Production deployment initiated"
        
    - name: üè• Production health check
      run: |
        echo "üè• Running production health checks..."
        
        # Add your production health check logic here
        # Examples:
        # - Check if services are responding
        # - Verify database connectivity
        # - Test critical API endpoints
        # - Check application metrics
        
        sleep 30  # Wait for services to start
        echo "‚úÖ Production health checks passed"
        
    - name: üìä Production Deployment Summary
      run: |
        echo "## üè≠ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Image | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | \`${{ needs.build-and-push.outputs.frontend-image }}\` | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | \`${{ needs.build-and-push.outputs.backend-image }}\` | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY
        echo "| Python | \`${{ needs.build-and-push.outputs.python-image }}\` | ‚úÖ Deployed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéâ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY

  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: üì¢ Send deployment notification
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Deployment notification: Success"
          # Add notification logic here (e.g., Slack, Discord, email)
        else
          echo "‚ùå Deployment notification: Failed"
          # Add failure notification logic here
        fi